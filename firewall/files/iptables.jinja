# Managed By SALT
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# Accept all connexion from localhost
-A INPUT -i lo -j ACCEPT
# reject all connection to 127.0.0.0/8 that are not coming from loopback interface
-A INPUT ! -i lo -d 127.0.0.0/8 -j DROP

# Don't drop connection already established to server.
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow outgoing connections
-A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT

{% for whitelisted_ip in rules.get('icmp', {}).get('whitelist', []) -%}
{% if loop.first -%}
# Autorize ICMP request from whitelisted
{%- endif %}
-A INPUT --source {{ whitelisted_ip }} -p icmp -m icmp --icmp-type 8 -j ACCEPT
{% endfor %}

{% if false == rules.get('icmp', {}).get('authorize', false) -%}
# Drop ICMP requests
-A INPUT -p icmp -m icmp --icmp-type 8 -j DROP
{% endif %}

#USER DEFINED INCOMING RULES
{% for name, service_rule in rules.get('incoming', {}).items() -%}
#Service : {{ name }}
-A INPUT
{%- if 'protocol' in service_rule %} --protocol {{ service_rule.get('protocol') }}{% endif -%}
{%- if 'interface' in service_rule %} --in-interface {{ service_rule.get('interface') }}{% endif -%}
{%- if 'source' in service_rule %} --source {{ service_rule.get('source') }}{% endif -%}
{%- if 'port' in service_rule %} --destination-port {{ service_rule.get('port') }}{% endif %} -j ACCEPT
{% endfor %}

{% if forwarding -%}
-A FORWARD -o {{ forward_interfaces.get('destination', 'eth0') }} -i {{ forward_interfaces.get('source', 'eth1') }} -s {{ forward_interfaces.get('source_network', '0.0.0.0/0') }} -m conntrack --ctstate NEW -j ACCEPT
-A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-t nat -F POSTROUTING
-t nat -A POSTROUTING -o {{ forward_interfaces.get('destination', 'eth0') }} -j MASQUERADE
{% endif %}
COMMIT
